from aiogram import Router, F
from aiogram.filters import Command, CommandObject
from aiogram.types import Message

from app.database.database import Database

router = Router()


@router.message(Command("add_admin"))
async def add_admin(message: Message, command: CommandObject, db: Database):
    if command.args is None:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –∞—Ä–≥—É–º–µ–Ω—Ç—ã")
        return

    try:
        args = command.args.strip().split()
        tg_id = int(args[0])
        username = args[1]
        is_superadmin = args[2].lower() == "true"

        admin = await db.add_admin(tg_id, username, is_superadmin)

        await message.answer(
            "‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω:\n"
            f"ID: {admin.tg_id}\n"
            f"Username: @{admin.username}\n"
            f"–°—É–ø–µ—Ä-–∞–¥–º–∏–Ω: {'–î–∞' if admin.is_superadmin else '–ù–µ—Ç'}"
        )

    except ValueError:
        await message.answer(
            "–û—à–∏–±–∫–∞: –Ω–µ–ø—Ä–∞–≤–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ü—Ä–∏–º–µ—Ä:\n"
            "/add_admin 123456 username true"
        )


@router.message(Command("add_location"))
async def add_location(message: Message, command: CommandObject, db: Database):
    if command.args is None:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –∞—Ä–≥—É–º–µ–Ω—Ç—ã")
        return

    try:
        location_name = command.args.strip()
        location = await db.add_location(location_name)

        await message.answer(
            "‚úÖ –õ–æ–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞:\n" f"Name: @{location.name}\n" 
        )

    except ValueError:
        await message.answer(
            "–û—à–∏–±–∫–∞: –Ω–µ–ø—Ä–∞–≤–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ü—Ä–∏–º–µ—Ä:\n"
            "/add_location –ì–æ–ª—å—Ü–æ–≤–∞"
        )

@router.message(Command("add_group"))
async def add_group(message: Message, command: CommandObject, db: Database):
    
    if command.args is None:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –∞—Ä–≥—É–º–µ–Ω—Ç—ã")
        return

    try:
        args = command.args.strip().split()
        group_name = args[0]
        location_name = args[1]
        admin_name = args[2]
        
        group = await db.add_group(group_name=group_name,admin_name=admin_name, location_name=location_name)

        await message.answer(
            "‚úÖ –ì—Ä—É–ø–ø–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞:\n" 
            f"group_name: {group.name}\n"
            f"location: {group.location}\n"
            f"tutor: {group.admin}" 
        )

    except ValueError:
        await message.answer(
            "–û—à–∏–±–∫–∞: –Ω–µ–ø—Ä–∞–≤–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ü—Ä–∏–º–µ—Ä:\n"
            "/add_group –°—Ä–µ–¥–∞_10:00 –ì–æ–ª—å—Ü–æ–≤–∞ Gleb"
        )

@router.message(Command("add_user"))
async def add_user(message: Message, command: CommandObject, db: Database):
    
    if command.args is None:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –∞—Ä–≥—É–º–µ–Ω—Ç—ã")
        return

    try:
        args = command.args.split(maxsplit=3)

        if len(args) < 3:
            raise ValueError("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤")
        fullname = f"{args[0]} {args[1]}"
        group_name = args[2]
        location_name = args[3]
        
        user = await db.add_user(username=fullname, group_name=group_name,location_name=location_name)

        await message.answer(
            "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω:\n" 
            f"username: {fullname}\n"
            f"group_name: {group_name}\n"
            f"location: {location_name}\n"
            f"points: {user.points}" 
        )

    except ValueError:
        await message.answer(
            "–û—à–∏–±–∫–∞: –Ω–µ–ø—Ä–∞–≤–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ü—Ä–∏–º–µ—Ä:\n"
            "/add_user –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤ –°—Ä–µ–¥–∞_10:30 –ì–æ–ª—å—Ü–æ–≤–∞ "
        )
    # except Exception as e:
    #     await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

@router.message(Command("show_groups_with_locations"))
async def show_groups_with_locations(
    message: Message, 
    command: CommandObject, 
    db: Database
    ):
    groups_locations = await db.get_all_group_and_locations()

    response = ["üìã –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –∏ –ª–æ–∫–∞—Ü–∏–π:\n"]
    response.extend(
        f"{group_name} -> {location_name}"
        for group_name, location_name in groups_locations
    )

    await message.answer('\n'.join(response))
    

# db.add_admin
